
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/PokemonInfo/_Layout.cshtml";
}

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">List</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
            <button class="btn btn-outline-success" type="button" onclick="history.back()">Go Back</button>
        </div>
    </div>
</nav>

<div class="row">
    <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
        <div class="position-sticky pt-3">
            <ul class="nav flex-column">
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Index", "Home")">
                        List
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Index", "PokemonInfo")">
                        Pokemon Info
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Index", "PokemonParty")">
                        Pokemon Party
                    </a>
                </li>
            </ul>
        </div>
    </nav>

    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
        <h2 class="text-center mb-4">Pokemon Details</h2>
        <div class="card-body">
            <form id="myForm" method="post">
                <div class="card">
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="Name" class="form-label">PokemonName:</label>
                            <input type="text" class="form-control" id="Name" name="Name" required />
                        </div>
                        <div class="mb-3">
                            <label for="Type" class="form-label">Type:</label>
                            <select class="form-select" id="Type" name="Type" required>
                                <option value="Damage">Damage Type</option>
                                <option value="Tank">Tank Type</option>
                                <option value="Mage">Mage Type</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="Lvl" class="form-label">Level:</label>
                            <input type="number" class="form-control" id="Lvl" name="Lvl" required />
                        </div>
                        <div class="mb-3">
                            <label for="HP" class="form-label">HP:</label>
                            <input type="number" class="form-control" id="HP" name="HP" required />
                        </div>
                        <div class="mb-3">
                            <label for="AttackDMG" class="form-label">AttackDMG:</label>
                            <input type="number" class="form-control" id="AttackDMG" name="AttackDMG" required />
                        </div>
                    </div>
                    <div class="card-footer text-end">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="reset" class="btn btn-secondary">Reset</button>
                    </div>
                </div>
            </form>
        </div>
    </main>
</div>
<script>
    class PokemonInfoForm {
        constructor() {
            this.form = document.getElementById("myForm");
            this.form.addEventListener('reset', this.resetForm.bind(this));
            this.form.addEventListener('submit', this.submitForm.bind(this));
        }
        resetForm() {

        }
        submitForm(event) {
            event.preventDefault();
            showConfirmAlert("Are you sure to add new data?", function () {
                const formData = $(this.form).serialize();
                $.ajax({
                    url: '@Url.Action("AddPokemon", "PokemonInfo")',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        if (result.success) {
                            showInfoAlert(result.message);
                            $('#myForm')[0].reset();
                        } else {
                            showInfoAlert(result.message);
                        }
                    }.bind(this),
                    error: function (xhr, status, error) {
                        showInfoAlert("An error occurred: " + error);
                    }
                });
            }.bind(this));
        }

    }
    //
    document.addEventListener('DOMContentLoaded', function () {
        new PokemonInfoForm();
    });
    //
    function showConfirmAlert(message, callback) {
        swal({
            title: message,
            text: "",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        }).then((isOkay) => {
            if (isOkay) {
                callback();
            }
        });
        return false;
    }
    function showInfoAlert(message) {
        swal({
            title: message,
            icon: "info",
            button: "OK",
        });
    }
</script>

